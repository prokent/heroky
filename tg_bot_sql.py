from dotenv import load_dotenv
import os
import sqlite3
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
DATABASE_URL = os.getenv('DATABASE_URL')  # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –±–æ—Ç.')

async def get_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        conn = sqlite3.connect(DATABASE_URL)  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor = conn.cursor()
        cursor.execute('SELECT username, email FROM user')
        users = cursor.fetchall()
        conn.close()
        
        if users:
            user_list = '\n'.join([f'{i+1}. {user[0]} - {user[1]}' for i, user in enumerate(users)])
            await update.message.reply_text(f'üìã **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**:\n\n{user_list}', parse_mode='Markdown')
        else:
            await update.message.reply_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
    except Exception as e:
        await update.message.reply_text(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}')

async def get_articles(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        await update.message.reply_text('–ü—ã—Ç–∞—é—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
        conn = sqlite3.connect(DATABASE_URL)  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor = conn.cursor()
        cursor.execute('SELECT title, intro, text FROM article')
        articles = cursor.fetchall()
        conn.close()
        
        if articles:
            article_list = '\n\n'.join([f'üìñ **–ó–∞–≥–æ–ª–æ–≤–æ–∫**: {article[0]}\n**–ò–Ω—Ç—Ä–æ**: {article[1]}\n**–¢–µ–∫—Å—Ç**: {article[2]}' for article in articles])
            await update.message.reply_text(article_list, parse_mode='Markdown')
        else:
            await update.message.reply_text('–°—Ç–∞—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
    except Exception as e:
        await update.message.reply_text(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–µ–π: {e}')

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("get_users", get_users))
    app.add_handler(CommandHandler("get_articles", get_articles))
    
    app.run_polling()

if __name__ == '__main__':
    main()
